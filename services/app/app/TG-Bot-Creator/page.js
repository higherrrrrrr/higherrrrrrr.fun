'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { GlitchText } from '../../components/GlitchText';

export default function TGBotCreatorPage() {
  const router = useRouter();
  const [botName, setBotName] = useState('');
  const [botUsername, setBotUsername] = useState('');
  const [botDescription, setBotDescription] = useState('');
  const [botToken, setBotToken] = useState('');
  const [commands, setCommands] = useState([
    { command: '/start', response: 'Welcome to my bot!', responses: [], baseImages: [], includeImages: false, imageOption: null, isDefault: true, isAutoGenerated: true },
    { command: '/help', response: 'Here are the available commands...', responses: [], baseImages: [], includeImages: false, imageOption: null, isDefault: true },
    { command: '', response: '', responses: [], baseImages: [], includeImages: false, imageOption: null, isDefault: false }
  ]);
  const [styleImages, setStyleImages] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [tokenError, setTokenError] = useState('');
  const [expanded, setExpanded] = useState({
    botInfo: true,
    apiConfig: true,
    styleImages: true,
    commands: true,
    tracking: true,
    buyBotResources: false,
    antiSpamResources: false,
    dexListingResources: false,
    memeGenerator: false
  });
  const [isComplete, setIsComplete] = useState({ apiConfig: false });
  const [apiProvider, setApiProvider] = useState('cloudflare');
  const [apiKey, setApiKey] = useState('');
  const [trackingOptions, setTrackingOptions] = useState({
    tokenPrice: false,
    tokenAddress: '',
    blockchain: 'ethereum',
    priceMilestones: [],
    technicalAnalysis: {
      priceAlerts: false,
      volumeAlerts: false,
      dailySummary: false
    },
    telegramGroup: false,
    telegramGroupUsername: '',
    memberMilestones: [],
    growthReports: {
      daily: false,
      weekly: false
    },
    twitter: false,
    twitterUsername: '',
    followerMilestones: [],
    tweetAlerts: {
      newTweets: false,
      viralTweets: false
    }
  });
  const [memeGenOptions, setMemeGenOptions] = useState({
    enabled: false,
    provider: '',
    apiKey: '',
    command: 'meme',
    dailyLimit: 5,
    characterImage: null,
    characterDescription: ''
  });

  // Add a new command
  const addCommand = () => {
    setCommands([...commands, { command: '', response: '', responses: [], baseImages: [], includeImages: false, imageOption: null, isDefault: false }]);
  };

  // Remove a command
  const removeCommand = (index) => {
    const updatedCommands = [...commands];
    updatedCommands.splice(index, 1);
    setCommands(updatedCommands);
  };

  // Update a command property
  const updateCommand = (index, property, value) => {
    const updatedCommands = [...commands];
    updatedCommands[index][property] = value;
    setCommands(updatedCommands);
  };

  // Add a response to a command
  const addResponse = (index) => {
    const updatedCommands = [...commands];
    if (!updatedCommands[index].responses) {
      updatedCommands[index].responses = [];
    }
    updatedCommands[index].responses.push('');
    setCommands(updatedCommands);
  };

  // Remove a response from a command
  const removeResponse = (cmdIndex, responseIndex) => {
    const updatedCommands = [...commands];
    updatedCommands[cmdIndex].responses.splice(responseIndex, 1);
    setCommands(updatedCommands);
  };

  // Update a response
  const updateResponse = (cmdIndex, responseIndex, value) => {
    const updatedCommands = [...commands];
    updatedCommands[cmdIndex].responses[responseIndex] = value;
    setCommands(updatedCommands);
  };

  // Add a base image to a command
  const addBaseImage = (index) => {
    const updatedCommands = [...commands];
    if (!updatedCommands[index].baseImages) {
      updatedCommands[index].baseImages = [];
    }
    updatedCommands[index].baseImages.push('');
    setCommands(updatedCommands);
  };

  // Remove a base image from a command
  const removeBaseImage = (cmdIndex, imageIndex) => {
    const updatedCommands = [...commands];
    updatedCommands[cmdIndex].baseImages.splice(imageIndex, 1);
    setCommands(updatedCommands);
  };

  // Update a base image
  const updateBaseImage = (cmdIndex, imageIndex, value) => {
    const updatedCommands = [...commands];
    updatedCommands[cmdIndex].baseImages[imageIndex] = value;
    setCommands(updatedCommands);
  };

  // Handle image upload
  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
      const newImages = files.map(file => ({
        file,
        preview: URL.createObjectURL(file)
      }));
      setStyleImages([...styleImages, ...newImages]);
    }
  };

  // Remove a style image
  const removeStyleImage = (index) => {
    const updatedImages = [...styleImages];
    URL.revokeObjectURL(updatedImages[index].preview);
    updatedImages.splice(index, 1);
    setStyleImages(updatedImages);
  };

  // Add a pre-uploaded image URL to a command
  const addPreUploadedImage = (commandIndex, imageUrl) => {
    console.log(`Adding pre-uploaded image to command ${commandIndex}`);
    console.log(`Image URL starts with: ${imageUrl.substring(0, 50)}...`);
    
    const updatedCommands = [...commands];
    if (!updatedCommands[commandIndex].preUploadedImages) {
      updatedCommands[commandIndex].preUploadedImages = [];
    }
    
    // Only allow up to 3 pre-uploaded images
    if (updatedCommands[commandIndex].preUploadedImages.length < 3) {
      updatedCommands[commandIndex].preUploadedImages.push(imageUrl);
      console.log(`Command now has ${updatedCommands[commandIndex].preUploadedImages.length} pre-uploaded images`);
      setCommands(updatedCommands);
    }
  };

  // Remove a pre-uploaded image from a command
  const removePreUploadedImage = (commandIndex, imageIndex) => {
    const updatedCommands = [...commands];
    updatedCommands[commandIndex].preUploadedImages.splice(imageIndex, 1);
    setCommands(updatedCommands);
  };

  // Toggle pre-uploaded images for a command
  const togglePreUploadedImages = (commandIndex) => {
    const updatedCommands = [...commands];
    updatedCommands[commandIndex].usePreUploadedImages = !updatedCommands[commandIndex].usePreUploadedImages;
    setCommands(updatedCommands);
  };

  // Toggle section
  const toggleSection = (section) => {
    setExpanded({ ...expanded, [section]: !expanded[section] });
    setIsComplete({ ...isComplete, [section]: true });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setTokenError('');
    
    try {
      // Validate bot token
      if (!/^\d+:/.test(botToken)) {
        setTokenError('Invalid bot token format. It should start with numbers followed by a colon.');
        setIsSubmitting(false);
        return;
      }
      
      // Upload style images if any
      const styleImageUrls = [];
      if (styleImages.length > 0) {
        // In a real app, you would upload these to a storage service
        // For now, we'll just use the preview URLs
        styleImages.forEach(img => {
          styleImageUrls.push(img.preview);
        });
      }
      
      // Prepare the bot data
      const botData = {
        name: botName,
        username: botUsername,
        description: botDescription,
        token: botToken,
        commands: commands.filter(cmd => cmd.command && cmd.response).map(cmd => {
          const processedCmd = {
            command: cmd.command,
            response: cmd.response,
            responses: cmd.responses || [],
            generateImage: cmd.generateImage || false,
            baseImages: cmd.baseImages || [],
            usePreUploadedImages: cmd.usePreUploadedImages || false,
            preUploadedImages: cmd.preUploadedImages || []
          };
          
          // Log pre-uploaded images
          if (cmd.usePreUploadedImages && cmd.preUploadedImages && cmd.preUploadedImages.length > 0) {
            console.log(`Command ${cmd.command} has ${cmd.preUploadedImages.length} pre-uploaded images`);
            console.log(`First image starts with: ${cmd.preUploadedImages[0].substring(0, 50)}...`);
          }
          
          return processedCmd;
        }),
        styleImageUrls
      };
      
      console.log(`Sending bot data with ${botData.commands.length} commands`);
      
      // Send the data to the API
      const response = await fetch('/api/TG-Bots', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(botData),
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message || 'Failed to create bot');
      }
      
      // Redirect to success page
      router.push('/TG-Bot-Creator/TGB-Success');
    } catch (error) {
      console.error('Error creating bot:', error);
      alert(`Failed to create bot: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Update the useEffect to use the description exactly as entered by the user
  useEffect(() => {
    if (botName || botDescription) {
      const updatedCommands = [...commands];
      const startCommandIndex = updatedCommands.findIndex(cmd => cmd.command === '/start');
      
      if (startCommandIndex !== -1) {
        // Create a welcome message using the bot name and description exactly as entered
        let welcomeMessage = `Welcome! `;
        
        if (botName) {
          welcomeMessage += `I'm ${botName}`;
          if (botDescription) {
            welcomeMessage += `, ${botDescription.charAt(0).toLowerCase() + botDescription.slice(1)}`;
          }
        } else if (botDescription) {
          welcomeMessage += `${botDescription.charAt(0).toUpperCase() + botDescription.slice(1)}`;
        }
        
        welcomeMessage += `\n\nType /help to see what I can do.`;
        
        // Only update if the current response is the default or empty
        if (
          updatedCommands[startCommandIndex].response === 'Welcome to my bot!' || 
          updatedCommands[startCommandIndex].response === '' ||
          // Check if it's a previously auto-generated message (to allow updates)
          updatedCommands[startCommandIndex].isAutoGenerated
        ) {
          updatedCommands[startCommandIndex].response = welcomeMessage;
          updatedCommands[startCommandIndex].isAutoGenerated = true;
          setCommands(updatedCommands);
        }
      }
    }
  }, [botName, botDescription]);

  return (
    <div className="min-h-screen bg-black text-green-500 p-4">
      <div className="max-w-4xl mx-auto p-6">
        <h1 className="text-3xl font-bold text-center mb-8">
          <GlitchText>Create Your Telegram Bot</GlitchText>
        </h1>
        
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Bot Information Section */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => {
                // Only allow toggling if required fields are filled
                if (!expanded.botInfo || (botName && botUsername && botToken)) {
                  toggleSection('botInfo');
                }
              }}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Bot Information</h2>
              <div className="flex items-center">
                {isComplete.botInfo && (
                  <span className="text-green-500 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </span>
                )}
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className={`h-5 w-5 transition-transform ${expanded.botInfo ? 'rotate-180' : ''}`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </button>
            
            {!expanded.botInfo && botName && botUsername && botToken && (
              <div className="px-4 py-3 bg-green-500/5 border-t border-green-500/20 grid grid-cols-1 md:grid-cols-3 gap-2 text-sm">
                <div>
                  <span className="text-green-500/70 mr-2">Name:</span>
                  <span className="text-green-500">{botName}</span>
                </div>
                <div>
                  <span className="text-green-500/70 mr-2">Username:</span>
                  <span className="text-green-500">@{botUsername}</span>
                </div>
                <div>
                  <span className="text-green-500/70 mr-2">Token:</span>
                  <span className="text-green-500">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                    </svg>
                    <span className="ml-1">Set</span>
                  </span>
                </div>
              </div>
            )}
            
            {expanded.botInfo && (
              <div className="p-6">
                {/* BotFather Instructions */}
                <div className="mb-6 bg-green-500/5 border border-green-500/20 rounded-lg p-4">
                  <h3 className="text-green-500 font-semibold mb-2 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    How to Get Your Bot Token from BotFather
                  </h3>
                  <ol className="list-decimal list-inside text-green-500/80 space-y-1 ml-1">
                    <li>Open Telegram and search for <span className="text-green-500 font-mono">@BotFather</span></li>
                    <li>Start a chat and send <span className="text-green-500 font-mono">/newbot</span> command</li>
                    <li>Follow prompts to name your bot and create a username</li>
                    <li>BotFather will generate a token like <span className="text-green-500 font-mono">123456789:ABCdefGhIJKlmNoPQRsTUVwxyZ</span></li>
                    <li>Copy this token and paste it below</li>
                  </ol>
                  <div className="mt-3 text-center">
                    <a 
                      href="https://t.me/botfather" 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      className="inline-flex items-center text-green-500 hover:text-green-400 underline"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                      Open BotFather in Telegram
                    </a>
                  </div>
                </div>
                
                {/* Bot Information Fields */}
                <div className="mb-4">
                  <label className="block text-green-500 mb-2">Bot Name <span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    value={botName}
                    onChange={(e) => setBotName(e.target.value)}
                    className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                    placeholder="My Awesome Bot"
                    required
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-green-500 mb-2">Bot Username <span className="text-red-500">*</span></label>
                  <div className="flex">
                    <span className="inline-flex items-center px-3 bg-green-500/10 border border-r-0 border-green-500/30 rounded-l-lg text-green-500">@</span>
                    <input
                      type="text"
                      value={botUsername}
                      onChange={(e) => setBotUsername(e.target.value)}
                      className="flex-1 p-3 bg-black border border-green-500/30 rounded-r-lg text-green-500 focus:outline-none focus:border-green-500"
                      placeholder="my_awesome_bot"
                      required
                    />
                  </div>
                </div>
                
                <div className="mb-4">
                  <label className="block text-green-500 mb-2">Bot Description</label>
                  <textarea
                    value={botDescription}
                    onChange={(e) => setBotDescription(e.target.value)}
                    className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                    placeholder="A brief description of what your bot does..."
                    rows={3}
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-green-500 mb-2">Bot Token <span className="text-red-500">*</span></label>
                  <input
                    type="password"
                    value={botToken}
                    onChange={(e) => setBotToken(e.target.value)}
                    className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                    placeholder="123456789:ABCdefGhIJKlmNoPQRsTUVwxyZ"
                    required
                  />
                </div>
                
                <div className="text-right text-sm text-green-500/70">
                  <span className="text-red-500">*</span> Required fields
                </div>
              </div>
            )}
          </div>
          
          {/* Image Generation API Section - MOVED UP */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('apiConfig')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Image Generation API (Req. for Image Generation)</h2>
              <div className="flex items-center">
                {isComplete.apiConfig && (
                  <span className="text-green-500 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </span>
                )}
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className={`h-5 w-5 transition-transform ${expanded.apiConfig ? 'rotate-180' : ''}`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </button>
            
            {!expanded.apiConfig && (
              <div className="px-4 py-2 bg-green-500/5 border-t border-green-500/20 text-sm">
                <div className="flex items-center">
                  <span className="text-green-500/70 mr-2">Provider:</span> 
                  <span className="text-green-500">
                    {apiProvider === 'cloudflare' ? 'Cloudflare Workers AI (Free)' : 
                     apiProvider === 'stability' ? 'Stability AI' : 
                     apiProvider === 'openai' ? 'OpenAI DALL-E' : 'Replicate'}
                  </span>
                  {apiKey && (
                    <span className="ml-4 text-green-500/70">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                      </svg>
                      <span className="ml-1">API Key Set</span>
                    </span>
                  )}
                </div>
              </div>
            )}
            
            {expanded.apiConfig && (
              <div className="p-6">
                <p className="text-green-500/80 mb-4">
                  Choose your image generation provider to create images for your bot commands. You can enable image generation for specific commands later.
                </p>
                
                <div className="mb-6">
                  <label className="block text-green-500 mb-2">Select Provider</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Cloudflare Option */}
                    <div 
                      className={`border ${apiProvider === 'cloudflare' ? 'border-green-500 bg-green-500/5' : 'border-green-500/20'} rounded-lg p-4 cursor-pointer hover:bg-green-500/5`}
                      onClick={() => setApiProvider('cloudflare')}
                    >
                      <div className="flex items-start">
                        <div className={`w-5 h-5 rounded-full border ${apiProvider === 'cloudflare' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 mt-1 flex items-center justify-center`}>
                          {apiProvider === 'cloudflare' && (
                            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          )}
                        </div>
                        <div>
                          <h3 className="font-semibold text-green-500">Cloudflare Workers AI</h3>
                          <p className="text-green-500/70 text-sm mt-1">Free tier with 100K requests/day. No credit card required.</p>
                          <div className="mt-2 text-xs text-green-500/60">
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Free</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Fast</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Simple Setup</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Stability AI Option */}
                    <div 
                      className={`border ${apiProvider === 'stability' ? 'border-green-500 bg-green-500/5' : 'border-green-500/20'} rounded-lg p-4 cursor-pointer hover:bg-green-500/5`}
                      onClick={() => setApiProvider('stability')}
                    >
                      <div className="flex items-start">
                        <div className={`w-5 h-5 rounded-full border ${apiProvider === 'stability' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 mt-1 flex items-center justify-center`}>
                          {apiProvider === 'stability' && (
                            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          )}
                        </div>
                        <div>
                          <h3 className="font-semibold text-green-500">Stability AI</h3>
                          <p className="text-green-500/70 text-sm mt-1">High-quality images with multiple model options.</p>
                          <div className="mt-2 text-xs text-green-500/60">
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">25 Free Credits</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">High Quality</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Multiple Models</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* OpenAI Option */}
                    <div 
                      className={`border ${apiProvider === 'openai' ? 'border-green-500 bg-green-500/5' : 'border-green-500/20'} rounded-lg p-4 cursor-pointer hover:bg-green-500/5`}
                      onClick={() => setApiProvider('openai')}
                    >
                      <div className="flex items-start">
                        <div className={`w-5 h-5 rounded-full border ${apiProvider === 'openai' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 mt-1 flex items-center justify-center`}>
                          {apiProvider === 'openai' && (
                            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          )}
                        </div>
                        <div>
                          <h3 className="font-semibold text-green-500">OpenAI DALL-E</h3>
                          <p className="text-green-500/70 text-sm mt-1">Excellent quality with good prompt following.</p>
                          <div className="mt-2 text-xs text-green-500/60">
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Premium</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Best Quality</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Complex Prompts</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Replicate Option */}
                    <div 
                      className={`border ${apiProvider === 'replicate' ? 'border-green-500 bg-green-500/5' : 'border-green-500/20'} rounded-lg p-4 cursor-pointer hover:bg-green-500/5`}
                      onClick={() => setApiProvider('replicate')}
                    >
                      <div className="flex items-start">
                        <div className={`w-5 h-5 rounded-full border ${apiProvider === 'replicate' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 mt-1 flex items-center justify-center`}>
                          {apiProvider === 'replicate' && (
                            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          )}
                        </div>
                        <div>
                          <h3 className="font-semibold text-green-500">Replicate</h3>
                          <p className="text-green-500/70 text-sm mt-1">Access to many different models for experimentation.</p>
                          <div className="mt-2 text-xs text-green-500/60">
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">$1 Free Credit</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Many Models</span>
                            <span className="inline-block px-2 py-1 bg-green-500/10 rounded mr-1 mb-1">Flexible</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="mb-4">
                  <div className="flex justify-between items-center mb-2">
                    <label className="block text-green-500">API Key</label>
                    <span className="text-green-500/70 text-sm">
                      {apiProvider === 'cloudflare' ? '(Optional for free tier)' : '(Required)'}
                    </span>
                  </div>
                  <input
                    type="password"
                    value={apiKey}
                    onChange={(e) => setApiKey(e.target.value)}
                    className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                    placeholder={`Enter your ${
                      apiProvider === 'cloudflare' ? 'Cloudflare' : 
                      apiProvider === 'stability' ? 'Stability AI' : 
                      apiProvider === 'openai' ? 'OpenAI' : 'Replicate'
                    } API key`}
                  />
                </div>
                
                <div className="text-center mt-4">
                  <a
                    href={
                      apiProvider === 'cloudflare' ? 'https://developers.cloudflare.com/workers-ai/' :
                      apiProvider === 'stability' ? 'https://platform.stability.ai/' :
                      apiProvider === 'openai' ? 'https://platform.openai.com/' :
                      'https://replicate.com/'
                    }
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-green-500 hover:text-green-400 text-sm underline"
                  >
                    Get an API key from {
                      apiProvider === 'cloudflare' ? 'Cloudflare Workers AI' :
                      apiProvider === 'stability' ? 'Stability AI' : 
                      apiProvider === 'openai' ? 'OpenAI' : 'Replicate'
                    }
                  </a>
                </div>
              </div>
            )}
          </div>
          
          {/* Style Reference Images Section */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <div className="bg-black/50 border border-green-500/30 rounded-lg p-6 space-y-4">
              <h2 className="text-xl font-semibold mb-4">Style Reference Images</h2>
              <p className="text-green-500/70 mb-4">Upload images to influence the style of generated images</p>
              
              <div className="flex flex-wrap gap-4 mb-4">
                {styleImages.map((img, index) => (
                  <div key={index} className="relative">
                    <img src={img.preview} alt={`Style ${index + 1}`} className="w-24 h-24 object-cover rounded-lg border border-green-500/30" />
                    <button
                      type="button"
                      onClick={() => removeStyleImage(index)}
                      className="absolute -top-2 -right-2 w-6 h-6 rounded-full bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 flex items-center justify-center text-red-500"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                ))}
                
                <label className="w-24 h-24 border-2 border-dashed border-green-500/30 rounded-lg flex items-center justify-center cursor-pointer hover:border-green-500/50 transition-colors">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-500/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleImageUpload}
                    className="hidden"
                  />
                </label>
              </div>
            </div>
          </div>
          
          {/* Bot Commands Section - with added blurb */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('commands')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Bot Commands</h2>
              <div className="flex items-center">
                {isComplete.commands && (
                  <span className="text-green-500 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </span>
                )}
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className={`h-5 w-5 transition-transform ${expanded.commands ? 'rotate-180' : ''}`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </button>
            
            {expanded.commands && (
              <div className="p-6">
                <p className="text-green-500/80 mb-4">
                  Create custom commands to build your community's unique culture. Commands help establish inside jokes, 
                  shared language, and memes that bind your community together. The right commands can transform casual 
                  members into devoted believers in your project.
                </p>
                
                {commands.map((cmd, index) => (
                  <div key={index} className="border border-green-500/20 p-4 rounded-lg">
                    <div className="grid grid-cols-1 md:grid-cols-10 gap-4 mb-4">
                      <div className="md:col-span-2">
                        <label className="block text-green-500 mb-2">Command</label>
                        <input
                          type="text"
                          value={cmd.command}
                          onChange={(e) => updateCommand(index, 'command', e.target.value)}
                          className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                          placeholder="/command"
                          required={!cmd.isDefault}
                          disabled={cmd.isDefault}
                        />
                      </div>
                      
                      <div className="md:col-span-7">
                        <div className="flex justify-between items-center mb-2">
                          <label className="block text-green-500">Default Response</label>
                          {cmd.isAutoGenerated && (
                            <span className="text-green-500/70 text-xs italic flex items-center">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                              </svg>
                              Auto-generated from bot info
                            </span>
                          )}
                        </div>
                        <textarea
                          value={cmd.response}
                          onChange={(e) => {
                            const updatedCommands = [...commands];
                            updatedCommands[index].response = e.target.value;
                            // Once manually edited, it's no longer auto-generated
                            if (updatedCommands[index].isAutoGenerated) {
                              updatedCommands[index].isAutoGenerated = false;
                            }
                            setCommands(updatedCommands);
                          }}
                          className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                          placeholder="Enter the bot's response for this command..."
                          rows={4}
                        />
                      </div>
                      <div className="md:col-span-1 flex justify-center pt-8">
                        {!cmd.isDefault && (
                          <button
                            type="button"
                            onClick={() => removeCommand(index)}
                            className="w-8 h-8 rounded-full bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 flex items-center justify-center text-red-500 transition-colors"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        )}
                      </div>
                    </div>
                    
                    {/* Additional Responses */}
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <label className="text-green-500">Additional Responses (Randomly Selected)</label>
                        <button
                          type="button"
                          onClick={() => addResponse(index)}
                          className="text-sm px-2 py-1 bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 rounded text-green-500 transition-colors"
                        >
                          Add Response
                        </button>
                      </div>
                      
                      {cmd.responses && cmd.responses.map((response, responseIndex) => (
                        <div key={responseIndex} className="flex gap-2 mb-2">
                          <textarea
                            value={response}
                            onChange={(e) => updateResponse(index, responseIndex, e.target.value)}
                            className="flex-grow p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500 h-16"
                            placeholder="Alternative response..."
                          />
                          <button
                            type="button"
                            onClick={() => removeResponse(index, responseIndex)}
                            className="w-8 h-8 self-center rounded-full bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 flex items-center justify-center text-red-500 transition-colors"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                    
                    {/* Simplified Image Options with fixed toggle */}
                    <div className="mb-4">
                      <div className="flex items-center justify-between">
                        <label className="block text-green-500">Include Images</label>
                        <label className="relative inline-block w-12 h-6 cursor-pointer">
                          <input
                            type="checkbox"
                            checked={cmd.includeImages || false}
                            onChange={() => {
                              const updatedCommands = [...commands];
                              updatedCommands[index].includeImages = !updatedCommands[index].includeImages;
                              
                              // Reset image option when toggling off
                              if (!updatedCommands[index].includeImages) {
                                updatedCommands[index].imageOption = null;
                              } else if (!updatedCommands[index].imageOption) {
                                // Default to generate if turning on
                                updatedCommands[index].imageOption = 'generate';
                              }
                              setCommands(updatedCommands);
                            }}
                            className="opacity-0 w-0 h-0 absolute"
                          />
                          <span className={`absolute top-0 left-0 right-0 bottom-0 rounded-full transition-colors duration-300 ${cmd.includeImages ? 'bg-green-500' : 'bg-green-500/30'}`}>
                            <span className={`absolute h-4 w-4 left-1 bottom-1 bg-black rounded-full transition-transform duration-300 ${cmd.includeImages ? 'transform translate-x-6' : ''}`}></span>
                          </span>
                        </label>
                      </div>
                      
                      {/* Expanded image options when includeImages is true */}
                      {cmd.includeImages && (
                        <div className="mt-4 ml-4 border-l-2 border-green-500/20 pl-4">
                          <div className="space-y-3 mb-4">
                            <div 
                              className="flex items-center cursor-pointer"
                              onClick={() => updateCommand(index, 'imageOption', 'generate')}
                            >
                              <div className={`w-5 h-5 rounded-full border ${cmd.imageOption === 'generate' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 flex items-center justify-center`}>
                                {cmd.imageOption === 'generate' && (
                                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                                )}
                              </div>
                              <span className="text-green-500">Generate image with AI</span>
                            </div>
                            
                            <div 
                              className="flex items-center cursor-pointer"
                              onClick={() => updateCommand(index, 'imageOption', 'upload')}
                            >
                              <div className={`w-5 h-5 rounded-full border ${cmd.imageOption === 'upload' ? 'border-green-500' : 'border-green-500/30'} flex-shrink-0 mr-3 flex items-center justify-center`}>
                                {cmd.imageOption === 'upload' && (
                                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                                )}
                              </div>
                              <span className="text-green-500">Use pre-uploaded images</span>
                            </div>
                          </div>
                          
                          {/* AI Image generation options */}
                          {cmd.imageOption === 'generate' && (
                            <div className="mb-4 ml-4">
                              <label className="block text-green-500 mb-2">Image Prompts (Random Selection)</label>
                              {cmd.baseImages && cmd.baseImages.length > 0 ? (
                                cmd.baseImages.map((image, imageIndex) => (
                                  <div key={imageIndex} className="flex mb-2">
                                    <input
                                      type="text"
                                      value={image}
                                      onChange={(e) => updateBaseImage(index, imageIndex, e.target.value)}
                                      className="flex-1 p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                                      placeholder="Describe the image you want to generate..."
                                    />
                                    <button
                                      type="button"
                                      onClick={() => removeBaseImage(index, imageIndex)}
                                      className="ml-2 text-red-500 hover:text-red-400"
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                      </svg>
                                    </button>
                                  </div>
                                ))
                              ) : (
                                <p className="text-green-500/70 text-sm mb-2">
                                  No image prompts added yet. Add one to generate images with this command.
                                </p>
                              )}
                              <button
                                type="button"
                                onClick={() => addBaseImage(index)}
                                className="px-4 py-2 bg-green-500/10 hover:bg-green-500/20 border border-green-500/30 rounded-lg text-green-500 text-sm flex items-center"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Add Image Prompt
                              </button>
                            </div>
                          )}
                          
                          {/* Pre-uploaded images options */}
                          {cmd.imageOption === 'upload' && (
                            <div className="mb-4 ml-4">
                              <label className="block text-green-500 mb-2">Upload Images</label>
                              <div className="border-2 border-dashed border-green-500/30 rounded-lg p-4 text-center">
                                <input
                                  type="file"
                                  id={`uploadImages-${index}`}
                                  accept="image/*"
                                  multiple
                                  onChange={(e) => handleCommandImageUpload(index, e)}
                                  className="hidden"
                                />
                                <label htmlFor={`uploadImages-${index}`} className="cursor-pointer">
                                  <div className="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-green-500/50 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <p className="text-green-500">Click to upload images</p>
                                    <p className="text-green-500/50 text-sm mt-1">or drag and drop</p>
                                  </div>
                                </label>
                              </div>
                              
                              {/* Display uploaded images */}
                              {cmd.uploadedImages && cmd.uploadedImages.length > 0 && (
                                <div className="mt-4 grid grid-cols-3 gap-2">
                                  {cmd.uploadedImages.map((img, imgIndex) => (
                                    <div key={imgIndex} className="relative group">
                                      <img 
                                        src={URL.createObjectURL(img)} 
                                        alt={`Uploaded ${imgIndex}`} 
                                        className="w-full h-24 object-cover rounded-lg"
                                      />
                                      <button
                                        type="button"
                                        onClick={() => removeUploadedImage(index, imgIndex)}
                                        className="absolute top-1 right-1 bg-red-500/80 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                                      >
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
                
                <button
                  type="button"
                  onClick={addCommand}
                  className="w-full p-3 bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 rounded-lg text-green-500 transition-colors"
                >
                  Add Command
                </button>
              </div>
            )}
          </div>
          
          {/* Meme Generator Section */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('memeGenerator')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Meme Generator</h2>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-5 w-5 transition-transform ${expanded.memeGenerator ? 'rotate-180' : ''}`} 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expanded.memeGenerator && (
              <div className="p-6">
                <p className="text-green-500/80 mb-4">
                  Let your community create custom memes featuring your project's mascot or character. 
                  This focused approach maintains brand consistency while allowing for creative variations.
                </p>
                
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-green-500 font-semibold">Enable Meme Generator</h3>
                  <label className="relative inline-block w-12 h-6 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={memeGenOptions.enabled || false}
                      onChange={() => {
                        setMemeGenOptions({
                          ...memeGenOptions,
                          enabled: !memeGenOptions.enabled
                        });
                      }}
                      className="opacity-0 w-0 h-0 absolute"
                    />
                    <span className={`absolute top-0 left-0 right-0 bottom-0 rounded-full transition-colors duration-300 ${memeGenOptions.enabled ? 'bg-green-500' : 'bg-green-500/30'}`}>
                      <span className={`absolute h-4 w-4 left-1 bottom-1 bg-black rounded-full transition-transform duration-300 ${memeGenOptions.enabled ? 'transform translate-x-6' : ''}`}></span>
                    </span>
                  </label>
                </div>
                
                {memeGenOptions.enabled && (
                  <div className="ml-4 border-l-2 border-green-500/20 pl-4 space-y-4">
                    <div>
                      <label className="block text-green-500 mb-2">API Provider</label>
                      <select
                        value={memeGenOptions.provider || ''}
                        onChange={(e) => setMemeGenOptions({
                          ...memeGenOptions,
                          provider: e.target.value
                        })}
                        className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                      >
                        <option value="">Select Provider</option>
                        <option value="airtok">Airtok AI</option>
                        <option value="openai">OpenAI DALL-E</option>
                        <option value="stability">Stability AI</option>
                        <option value="custom">Custom API</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-green-500 mb-2">API Key</label>
                      <input
                        type="password"
                        value={memeGenOptions.apiKey || ''}
                        onChange={(e) => setMemeGenOptions({
                          ...memeGenOptions,
                          apiKey: e.target.value
                        })}
                        className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                        placeholder="Enter your API key"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-green-500 mb-2">Command Name</label>
                      <div className="flex">
                        <span className="text-green-500 px-3 py-3 bg-green-500/10 border border-r-0 border-green-500/30 rounded-l-lg">/</span>
                        <input
                          type="text"
                          value={memeGenOptions.command || 'meme'}
                          onChange={(e) => setMemeGenOptions({
                            ...memeGenOptions,
                            command: e.target.value
                          })}
                          className="flex-1 p-3 bg-black border border-green-500/30 rounded-r-lg text-green-500 focus:outline-none focus:border-green-500"
                          placeholder="meme"
                        />
                      </div>
                      <p className="text-green-500/60 text-sm mt-1">
                        Users will generate memes using /{memeGenOptions.command || 'meme'} followed by their prompt
                      </p>
                    </div>
                    
                    <div>
                      <label className="block text-green-500 mb-2">Usage Limits</label>
                      <div className="flex items-center space-x-3">
                        <input
                          type="number"
                          value={memeGenOptions.dailyLimit || 5}
                          onChange={(e) => setMemeGenOptions({
                            ...memeGenOptions,
                            dailyLimit: parseInt(e.target.value)
                          })}
                          className="w-24 p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                          min="1"
                          max="100"
                        />
                        <span className="text-green-500">memes per user daily</span>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <h3 className="text-green-500 font-medium mb-3">Character Configuration</h3>
                      <p className="text-green-500/80 mb-3">
                        Upload your project's mascot or character to create branded memes that maintain visual identity.
                      </p>
                      
                      <div className="border-2 border-dashed border-green-500/30 rounded-lg p-4 text-center mb-4">
                        <div className="py-4">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-green-500/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                          <p className="text-green-500/70 mt-2">Upload your character's reference image</p>
                          <button
                            className="mt-3 px-4 py-2 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg transition-colors"
                          >
                            Select Image
                          </button>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-green-500 mb-2">Character Description</label>
                        <textarea
                          value={memeGenOptions.characterDescription || ''}
                          onChange={(e) => setMemeGenOptions({
                            ...memeGenOptions,
                            characterDescription: e.target.value
                          })}
                          className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500 min-h-[100px]"
                          placeholder="Describe your character in detail (color, features, style, personality, etc.)"
                        ></textarea>
                        <p className="text-green-500/60 text-sm mt-1">
                          This description helps the AI understand your character's key features and maintain consistency.
                        </p>
                      </div>
                      
                      <div className="mt-4 p-4 bg-green-500/5 border border-green-500/20 rounded-lg">
                        <h4 className="text-green-500 font-medium mb-2">Example Usage:</h4>
                        <ul className="space-y-1 text-green-500/80">
                          <li>• /{memeGenOptions.command || 'meme'} character riding a rocket to the moon</li>
                          <li>• /{memeGenOptions.command || 'meme'} character celebrating with champagne</li>
                          <li>• /{memeGenOptions.command || 'meme'} character as a wojak crying at chart</li>
                        </ul>
                      </div>
                    </div>
                    
                    <div className="text-amber-500/80 text-sm p-3 bg-amber-500/10 rounded-lg">
                      <p className="flex items-start">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        Image generation costs will be charged to your API account. Setting reasonable usage limits helps control costs.
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
          
          {/* Tracking & Analytics Section - starting collapsed */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('tracking')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Tracking & Analytics</h2>
              <div className="flex items-center">
                {isComplete.tracking && (
                  <span className="text-green-500 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </span>
                )}
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className={`h-5 w-5 transition-transform ${expanded.tracking ? 'rotate-180' : ''}`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </button>
            
            {expanded.tracking && (
              <div className="p-6">
                <div className="mb-6">
                  <p className="text-green-500/80 mb-4">
                    Enable tracking features for your Solana token and community. Your bot can monitor prices, 
                    member counts, and other metrics, sending alerts when important milestones are reached.
                  </p>
                  
                  {/* Token Tracking */}
                  <div className="mb-6 border-b border-green-500/20 pb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-green-500 font-semibold">Token Tracking</h3>
                      <label className="relative inline-block w-12 h-6 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={trackingOptions.tokenPrice || false}
                          onChange={() => {
                            setTrackingOptions({
                              ...trackingOptions,
                              tokenPrice: !trackingOptions.tokenPrice
                            });
                          }}
                          className="opacity-0 w-0 h-0 absolute"
                        />
                        <span className={`absolute top-0 left-0 right-0 bottom-0 rounded-full transition-colors duration-300 ${trackingOptions.tokenPrice ? 'bg-green-500' : 'bg-green-500/30'}`}>
                          <span className={`absolute h-4 w-4 left-1 bottom-1 bg-black rounded-full transition-transform duration-300 ${trackingOptions.tokenPrice ? 'transform translate-x-6' : ''}`}></span>
                        </span>
                      </label>
                    </div>
                    
                    {trackingOptions.tokenPrice && (
                      <div className="ml-4 border-l-2 border-green-500/20 pl-4 space-y-4">
                        <div>
                          <label className="block text-green-500 mb-2">Solana Token Address</label>
                          <input
                            type="text"
                            value={trackingOptions.tokenAddress || ''}
                            onChange={(e) => setTrackingOptions({
                              ...trackingOptions,
                              tokenAddress: e.target.value
                            })}
                            className="w-full p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                            placeholder="Enter your Solana token address"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-green-500 mb-2">Marketcap Milestones</label>
                          <div className="space-y-2">
                            {(trackingOptions.marketcapMilestones || []).map((milestone, idx) => (
                              <div key={idx} className="flex items-center space-x-2">
                                <span className="text-green-500 px-2">$</span>
                                <input
                                  type="number"
                                  value={milestone}
                                  onChange={(e) => {
                                    const newMilestones = [...(trackingOptions.marketcapMilestones || [])];
                                    newMilestones[idx] = parseFloat(e.target.value);
                                    setTrackingOptions({
                                      ...trackingOptions,
                                      marketcapMilestones: newMilestones
                                    });
                                  }}
                                  className="flex-1 p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                                  placeholder="1000000"
                                  step="10000"
                                />
                                <button
                                  type="button"
                                  onClick={() => {
                                    const newMilestones = [...(trackingOptions.marketcapMilestones || [])];
                                    newMilestones.splice(idx, 1);
                                    setTrackingOptions({
                                      ...trackingOptions,
                                      marketcapMilestones: newMilestones
                                    });
                                  }}
                                  className="p-2 bg-red-500/20 hover:bg-red-500/40 text-red-500 rounded-lg"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                            <button
                              type="button"
                              onClick={() => {
                                setTrackingOptions({
                                  ...trackingOptions,
                                  marketcapMilestones: [...(trackingOptions.marketcapMilestones || []), 1000000]
                                });
                              }}
                              className="w-full p-2 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg flex items-center justify-center"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                              </svg>
                              Add Marketcap Milestone
                            </button>
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-green-500 mb-2">Price Reports</label>
                          <div className="space-y-2">
                            <label className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={trackingOptions.priceReports?.daily || false}
                                onChange={() => setTrackingOptions({
                                  ...trackingOptions,
                                  priceReports: {
                                    ...(trackingOptions.priceReports || {}),
                                    daily: !(trackingOptions.priceReports?.daily || false)
                                  }
                                })}
                                className="form-checkbox h-5 w-5 text-green-500 rounded border-green-500/50 bg-black focus:ring-0"
                              />
                              <span className="text-green-500">Daily price summary</span>
                            </label>
                            <label className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={trackingOptions.priceReports?.weekly || false}
                                onChange={() => setTrackingOptions({
                                  ...trackingOptions,
                                  priceReports: {
                                    ...(trackingOptions.priceReports || {}),
                                    weekly: !(trackingOptions.priceReports?.weekly || false)
                                  }
                                })}
                                className="form-checkbox h-5 w-5 text-green-500 rounded border-green-500/50 bg-black focus:ring-0"
                              />
                              <span className="text-green-500">Weekly price summary</span>
                            </label>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Telegram Group Tracking */}
                  <div className="mb-6 border-b border-green-500/20 pb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-green-500 font-semibold">Telegram Group Tracking</h3>
                      <label className="relative inline-block w-12 h-6 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={trackingOptions.telegramGroup || false}
                          onChange={() => {
                            setTrackingOptions({
                              ...trackingOptions,
                              telegramGroup: !trackingOptions.telegramGroup
                            });
                          }}
                          className="opacity-0 w-0 h-0 absolute"
                        />
                        <span className={`absolute top-0 left-0 right-0 bottom-0 rounded-full transition-colors duration-300 ${trackingOptions.telegramGroup ? 'bg-green-500' : 'bg-green-500/30'}`}>
                          <span className={`absolute h-4 w-4 left-1 bottom-1 bg-black rounded-full transition-transform duration-300 ${trackingOptions.telegramGroup ? 'transform translate-x-6' : ''}`}></span>
                        </span>
                      </label>
                    </div>
                    
                    {trackingOptions.telegramGroup && (
                      <div className="ml-4 border-l-2 border-green-500/20 pl-4 space-y-4">
                        <div>
                          <label className="block text-green-500 mb-2">Telegram Group Username</label>
                          <div className="flex">
                            <span className="inline-flex items-center px-3 bg-green-500/10 border border-r-0 border-green-500/30 rounded-l-lg text-green-500">@</span>
                            <input
                              type="text"
                              value={trackingOptions.telegramGroupUsername || ''}
                              onChange={(e) => setTrackingOptions({
                                ...trackingOptions,
                                telegramGroupUsername: e.target.value
                              })}
                              className="flex-1 p-3 bg-black border border-green-500/30 rounded-r-lg text-green-500 focus:outline-none focus:border-green-500"
                              placeholder="your_group_name"
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-green-500 mb-2">Member Milestones</label>
                          <div className="space-y-2">
                            {(trackingOptions.memberMilestones || []).map((milestone, idx) => (
                              <div key={idx} className="flex items-center space-x-2">
                                <input
                                  type="number"
                                  value={milestone}
                                  onChange={(e) => {
                                    const newMilestones = [...(trackingOptions.memberMilestones || [])];
                                    newMilestones[idx] = parseInt(e.target.value);
                                    setTrackingOptions({
                                      ...trackingOptions,
                                      memberMilestones: newMilestones
                                    });
                                  }}
                                  className="flex-1 p-3 bg-black border border-green-500/30 rounded-lg text-green-500 focus:outline-none focus:border-green-500"
                                  placeholder="1000"
                                  step="100"
                                />
                                <button
                                  type="button"
                                  onClick={() => {
                                    const newMilestones = [...(trackingOptions.memberMilestones || [])];
                                    newMilestones.splice(idx, 1);
                                    setTrackingOptions({
                                      ...trackingOptions,
                                      memberMilestones: newMilestones
                                    });
                                  }}
                                  className="p-2 bg-red-500/20 hover:bg-red-500/40 text-red-500 rounded-lg"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                            <button
                              type="button"
                              onClick={() => {
                                setTrackingOptions({
                                  ...trackingOptions,
                                  memberMilestones: [...(trackingOptions.memberMilestones || []), 1000]
                                });
                              }}
                              className="w-full p-2 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg flex items-center justify-center"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                              </svg>
                              Add Member Milestone
                            </button>
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-green-500 mb-2">Growth Reports</label>
                          <div className="space-y-2">
                            <label className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={trackingOptions.growthReports?.daily || false}
                                onChange={() => setTrackingOptions({
                                  ...trackingOptions,
                                  growthReports: {
                                    ...(trackingOptions.growthReports || {}),
                                    daily: !(trackingOptions.growthReports?.daily || false)
                                  }
                                })}
                                className="form-checkbox h-5 w-5 text-green-500 rounded border-green-500/50 bg-black focus:ring-0"
                              />
                              <span className="text-green-500">Daily growth report</span>
                            </label>
                            <label className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={trackingOptions.growthReports?.weekly || false}
                                onChange={() => setTrackingOptions({
                                  ...trackingOptions,
                                  growthReports: {
                                    ...(trackingOptions.growthReports || {}),
                                    weekly: !(trackingOptions.growthReports?.weekly || false)
                                  }
                                })}
                                className="form-checkbox h-5 w-5 text-green-500 rounded border-green-500/50 bg-black focus:ring-0"
                              />
                              <span className="text-green-500">Weekly growth summary</span>
                            </label>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Twitter Tracking - Coming Sewn */}
                  <div className="mb-6 opacity-75">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center">
                        <h3 className="text-green-500 font-semibold">Twitter Follower Tracking</h3>
                        <span className="ml-3 px-2 py-1 text-xs bg-green-500/20 text-green-400 rounded-md font-medium">
                          Coming Sewn
                        </span>
                      </div>
                      <label className="relative inline-block w-12 h-6 cursor-not-allowed">
                        <input
                          type="checkbox"
                          disabled
                          className="opacity-0 w-0 h-0 absolute"
                        />
                        <span className="absolute top-0 left-0 right-0 bottom-0 rounded-full bg-green-500/30">
                          <span className="absolute h-4 w-4 left-1 bottom-1 bg-black rounded-full"></span>
                        </span>
                      </label>
                    </div>
                    
                    <div className="ml-4 border-l-2 border-green-500/20 pl-4">
                      <p className="text-green-500/70 italic">
                        Soon you'll be able to track Twitter follower milestones and receive growth reports.
                        We're working on making this feature available in an upcoming update.
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-green-500/70 text-sm mt-4 p-3 bg-green-500/10 rounded-lg">
                    <p className="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      These tracking features use the DEXScreener API for token data, Telegram Bot API for group metrics, and Twitter API for follower counts. Your bot will check for updates periodically and send notifications when milestones are reached.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* Buy Bot Resources Section - with benefits explanation and starting collapsed */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('buyBotResources')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Buy Bot Resources</h2>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-5 w-5 transition-transform ${expanded.buyBotResources ? 'rotate-180' : ''}`} 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expanded.buyBotResources && (
              <div className="p-6">
                <div className="mb-6">
                  <p className="text-green-500/80 mb-4">
                    Buy bots are essential for creating excitement and momentum in your community. They automatically 
                    announce when someone purchases your token, creating social proof and FOMO. Active buying 
                    notifications encourage more purchases, increase group engagement, and build confidence in your 
                    project's momentum. Here are some popular options you can add to your group:
                  </p>
                  
                  <div className="space-y-6">
                    {/* Buy Bot Option 1 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">BuyBot</h3>
                        <a 
                          href="https://t.me/buybotxyz" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          One of the most popular buy bots for Solana tokens. Free to use with premium features available.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Real-time buy notifications</li>
                            <li>Customizable messages</li>
                            <li>Whale alerts</li>
                            <li>Transaction links</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @buybotxyz to your Telegram group</li>
                            <li>Type /setup in your group</li>
                            <li>Follow the prompts to enter your token address</li>
                            <li>Configure notification settings</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                    
                    {/* Buy Bot Option 2 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">WhaleBotPro</h3>
                        <a 
                          href="https://t.me/whalebotpro" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Advanced buy tracking with detailed analytics and whale alerts.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Buy and sell notifications</li>
                            <li>Price impact calculations</li>
                            <li>Wallet tracking</li>
                            <li>Daily volume reports</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @whalebotpro to your group</li>
                            <li>Use /register command</li>
                            <li>Enter your token contract address</li>
                            <li>Set minimum transaction amounts</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                    
                    {/* Buy Bot Option 3 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">SolTracker</h3>
                        <a 
                          href="https://t.me/soltracker_bot" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Solana-specific tracking bot with customizable alerts and detailed transaction info.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Solana-optimized tracking</li>
                            <li>Multiple token support</li>
                            <li>Customizable thresholds</li>
                            <li>Graphical reports</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @soltracker_bot to your group</li>
                            <li>Use /track command</li>
                            <li>Enter your Solana token address</li>
                            <li>Configure notification preferences</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-6 p-4 bg-green-500/10 rounded-lg border border-green-500/20">
                    <h4 className="text-green-500 font-medium mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      Pro Tips:
                    </h4>
                    <ul className="list-disc list-inside text-green-500/80 space-y-1">
                      <li>Make sure to give the buy bot admin privileges in your group</li>
                      <li>Set appropriate minimum buy amounts to avoid spam</li>
                      <li>Consider using only one buy bot to prevent duplicate notifications</li>
                      <li>Test the bot in a private group before adding to your main community</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* Anti-Spam Bot Resources Section */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('antiSpamResources')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">Anti-Spam Resources</h2>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-5 w-5 transition-transform ${expanded.antiSpamResources ? 'rotate-180' : ''}`} 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expanded.antiSpamResources && (
              <div className="p-6">
                <div className="mb-6">
                  <p className="text-green-500/80 mb-4">
                    Protecting your community from spam, scams, and raids is essential for maintaining a healthy Telegram group. 
                    Anti-spam bots can verify new members, filter malicious content, and prevent coordinated attacks. 
                    A secure group builds trust and allows genuine discussions to flourish without interruption.
                  </p>
                  
                  <div className="space-y-6">
                    {/* Verification Setup Guide */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4">
                        <h3 className="font-semibold text-green-500">Setting Up a Verification System</h3>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Create a two-step verification process to protect your group from bots and spam accounts.
                        </p>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Step-by-Step Guide:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-2">
                            <li>Create two Telegram groups:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>A verification channel (e.g., "Project Name Verification")</li>
                                <li>Your main community group (e.g., "Project Name Community")</li>
                              </ul>
                            </li>
                            <li>Set up your main group:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>Go to Group Settings → Group Type → Private Group</li>
                                <li>Go to Permissions → Add Members → Only admins can add members</li>
                              </ul>
                            </li>
                            <li>Set up your verification channel:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>Add a captcha bot (like @CaptchaBot) to this group</li>
                                <li>Configure the bot to grant access to your main group after verification</li>
                                <li>Create an invite link for this verification channel</li>
                              </ul>
                            </li>
                            <li>Share only the verification channel link publicly</li>
                            <li>Add a welcome message explaining the verification process</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                    
                    {/* Anti-Spam Bot Option 1 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">CaptchaBot</h3>
                        <a 
                          href="https://t.me/captchabot" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          The most popular captcha verification bot for Telegram groups. Requires new members to solve a captcha to gain access.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Image-based captcha verification</li>
                            <li>Customizable welcome messages</li>
                            <li>Automatic removal of unverified users</li>
                            <li>Multi-group support</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @CaptchaBot to your group</li>
                            <li>Make the bot an admin with delete messages and ban users permissions</li>
                            <li>Type /setup to configure settings</li>
                            <li>Choose verification type and timeframe</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                    
                    {/* Anti-Spam Bot Option 2 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">GroupHelpBot</h3>
                        <a 
                          href="https://t.me/GroupHelpBot" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Comprehensive anti-spam and group management bot with advanced filtering capabilities.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Anti-spam filters for links, forwards, and media</li>
                            <li>Raid protection with auto-mute</li>
                            <li>Scam domain detection</li>
                            <li>Customizable auto-responses</li>
                            <li>Moderation tools and logs</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @GroupHelpBot to your group</li>
                            <li>Grant admin privileges with appropriate permissions</li>
                            <li>Use /settings to configure protection levels</li>
                            <li>Set up custom filters with /filter commands</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                    
                    {/* Anti-Spam Bot Option 3 */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4 flex justify-between items-center">
                        <h3 className="font-semibold text-green-500">Combot</h3>
                        <a 
                          href="https://t.me/combot" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-500 rounded-lg text-sm transition-colors"
                        >
                          Open in Telegram
                        </a>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Feature-rich moderation bot with analytics and advanced anti-spam capabilities.
                        </p>
                        <div className="mb-3">
                          <h4 className="text-green-500 font-medium mb-2">Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Group statistics and activity tracking</li>
                            <li>Anti-flood protection</li>
                            <li>Customizable auto-warnings</li>
                            <li>Content filtering</li>
                            <li>User reputation system</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Setup Instructions:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-1">
                            <li>Add @combot to your group</li>
                            <li>Make it an admin with appropriate permissions</li>
                            <li>Visit the Combot dashboard to configure settings</li>
                            <li>Set up anti-spam filters and verification requirements</li>
                          </ol>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-6 p-4 bg-green-500/10 rounded-lg border border-green-500/20">
                    <h4 className="text-green-500 font-medium mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      Security Best Practices:
                    </h4>
                    <ul className="list-disc list-inside text-green-500/80 space-y-1">
                      <li>Use a combination of verification and anti-spam bots for maximum protection</li>
                      <li>Restrict new members from posting links or media for the first 24 hours</li>
                      <li>Have at least 2-3 active human moderators for groups over 1,000 members</li>
                      <li>Create clear community guidelines and pin them to your group</li>
                      <li>Regularly review and update your security settings as your group grows</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* DEX Listing Resources Section */}
          <div className="border border-green-500/30 rounded-lg overflow-hidden mb-6">
            <button 
              type="button"
              onClick={() => toggleSection('dexListingResources')}
              className="w-full bg-black p-4 flex justify-between items-center text-left"
            >
              <h2 className="text-xl font-semibold">DEX Listing Resources</h2>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-5 w-5 transition-transform ${expanded.dexListingResources ? 'rotate-180' : ''}`} 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {expanded.dexListingResources && (
              <div className="p-6">
                <div className="mb-6">
                  <p className="text-green-500/80 mb-4">
                    DEXScreener and DEXTools listings help your token's visibility and credibility. 
                    A well-optimized listing helps traders find your token, verify its legitimacy, and track its performance. 
                    Here's how to get listed and maximize your presence on these critical platforms.
                  </p>
                  
                  <div className="space-y-6">
                    {/* DEXScreener Section */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4">
                        <h3 className="font-semibold text-green-500">DEXScreener Listing</h3>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          DEXScreener automatically lists tokens after they have liquidity and trading activity, but you can optimize your listing for better visibility.
                        </p>
                        
                        <div className="mb-4">
                          <h4 className="text-green-500 font-medium mb-2">Getting Listed:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-2">
                            <li>Ensure your token has sufficient liquidity on a supported DEX</li>
                            <li>Wait for natural indexing (usually happens within 24 hours of first trades)</li>
                            <li>If not automatically listed after 24 hours with trading activity, you can request listing through their form</li>
                          </ol>
                        </div>
                        
                        <div className="mb-4">
                          <h4 className="text-green-500 font-medium mb-2">Optimizing Your Listing:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-2">
                            <li>Update token information:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>Visit <a href="https://dexscreener.com/claim" target="_blank" rel="noopener noreferrer" className="underline hover:text-green-400">dexscreener.com/claim</a></li>
                                <li>Connect your wallet (must be the deployer wallet)</li>
                                <li>Add logo, website, social links, and description</li>
                              </ul>
                            </li>
                            <li>Promote your DEXScreener link in your community</li>
                            <li>Encourage bookmarking to increase popularity ranking</li>
                          </ol>
                        </div>
                        
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Premium Features:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Promoted Pairs ($99/week): Featured placement on the homepage</li>
                            <li>Trending Boost ($199/week): Increased visibility in trending sections</li>
                            <li>Purchase at <a href="https://dexscreener.com/advertise" target="_blank" rel="noopener noreferrer" className="underline hover:text-green-400">dexscreener.com/advertise</a></li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    
                    {/* DEXTools Section */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4">
                        <h3 className="font-semibold text-green-500">DEXTools Listing</h3>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          DEXTools is a premium platform with high visibility. Getting properly listed and verified can significantly boost your token's credibility.
                        </p>
                        
                        <div className="mb-4">
                          <h4 className="text-green-500 font-medium mb-2">Basic Listing:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-2">
                            <li>Your token will be automatically indexed after trading begins</li>
                            <li>For Solana tokens, ensure you're trading on supported DEXs (Raydium, Orca, etc.)</li>
                            <li>If not appearing, submit a request through their support channel</li>
                          </ol>
                        </div>
                        
                        <div className="mb-4">
                          <h4 className="text-green-500 font-medium mb-2">Social Info Update:</h4>
                          <ol className="list-decimal list-inside text-green-500/80 space-y-2">
                            <li>Visit <a href="https://www.dextools.io/app/en/social-update" target="_blank" rel="noopener noreferrer" className="underline hover:text-green-400">dextools.io/app/en/social-update</a></li>
                            <li>Connect wallet (must be deployer wallet or have significant holdings)</li>
                            <li>Submit social links, website, description, and logo</li>
                            <li>Wait for approval (typically 1-3 days)</li>
                          </ol>
                        </div>
                        
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Premium Services:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-1">
                            <li>Standard Ads ($1,500/week): Banner ads on the platform</li>
                            <li>Trending Placement ($3,000/week): Featured in trending section</li>
                            <li>Pair Explorer Ads ($5,000/week): Premium visibility on pair pages</li>
                            <li>Contact their sales team via <a href="https://www.dextools.io/app/en/advertise" target="_blank" rel="noopener noreferrer" className="underline hover:text-green-400">dextools.io/app/en/advertise</a></li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    
                    {/* Best Practices */}
                    <div className="border border-green-500/20 rounded-lg overflow-hidden">
                      <div className="bg-green-500/10 p-4">
                        <h3 className="font-semibold text-green-500">Maximizing DEX Listings</h3>
                      </div>
                      <div className="p-4">
                        <p className="text-green-500/80 mb-3">
                          Beyond basic listings, here are strategies to maximize the impact of your DEX presence:
                        </p>
                        
                        <div>
                          <h4 className="text-green-500 font-medium mb-2">Optimization Strategies:</h4>
                          <ul className="list-disc list-inside text-green-500/80 space-y-2">
                            <li>Complete all profile information:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>High-quality logo (transparent background PNG)</li>
                                <li>Comprehensive description with tokenomics</li>
                                <li>All social links and community channels</li>
                                <li>Updated contract information and audit links</li>
                              </ul>
                            </li>
                            <li>Encourage community engagement:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>Ask community to bookmark your pair</li>
                                <li>Drive traffic to your DEX listings</li>
                                <li>Encourage positive votes on DEXTools</li>
                              </ul>
                            </li>
                            <li>Maintain healthy metrics:
                              <ul className="list-disc list-inside ml-6 mt-1 space-y-1 text-green-500/70">
                                <li>Stable or growing liquidity</li>
                                <li>Consistent trading volume</li>
                                <li>Balanced buy/sell ratio</li>
                                <li>Low concentration of tokens in top wallets</li>
                              </ul>
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-6 p-4 bg-green-500/10 rounded-lg border border-green-500/20">
                    <h4 className="text-green-500 font-medium mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      Pro Tips:
                    </h4>
                    <ul className="list-disc list-inside text-green-500/80 space-y-1">
                      <li>Invest in premium placements during important project milestones</li>
                      <li>Create tutorial videos showing how to use DEXScreener/DEXTools to find your token</li>
                      <li>Monitor competitor listings to stay competitive with your presentation</li>
                      <li>Consider hiring a professional designer for your token logo and branding</li>
                      <li>Always maintain accurate information across all platforms</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* Submit Button */}
          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full p-4 bg-green-500 hover:bg-green-600 text-black font-bold rounded-lg flex items-center justify-center ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {isSubmitting ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating Your Bot...
              </>
            ) : (
              'Create Bot'
            )}
          </button>
        </form>
      </div>
      {/* Position the button like on the lore page */}
      <div className="mt-24 ml-8">
        <button
          onClick={() => router.push('/creator-dashboard-MVP')}
          className="flex items-center text-green-500 hover:text-green-400 transition"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
        </svg>
        Back to Dashboard
      </button>
    </div>
  </div>
);
}