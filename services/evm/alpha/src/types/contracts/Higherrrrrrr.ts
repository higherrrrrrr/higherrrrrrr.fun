/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IHigherrrrrrr {
  export type PriceLevelStruct = { price: BigNumberish; name: string };

  export type PriceLevelStructOutput = [price: bigint, name: string] & {
    price: bigint;
    name: string;
  };

  export type MarketStateStruct = {
    marketType: BigNumberish;
    marketAddress: AddressLike;
  };

  export type MarketStateStructOutput = [
    marketType: bigint,
    marketAddress: string
  ] & { marketType: bigint; marketAddress: string };
}

export interface HigherrrrrrrInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONVICTION_THRESHOLD"
      | "MAX_TOTAL_SUPPLY"
      | "MIN_ORDER_SIZE"
      | "TOTAL_FEE_BPS"
      | "WETH"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bondingCurve"
      | "burn"
      | "buy"
      | "convictionNFT"
      | "currentExchangeRate"
      | "decimals"
      | "feeRecipient"
      | "getCurrentPrice"
      | "getEthBuyQuote"
      | "getEthSellQuote"
      | "getPriceLevels"
      | "getTokenBuyQuote"
      | "getTokenSellQuote"
      | "initialize"
      | "marketType"
      | "name"
      | "nonfungiblePositionManager"
      | "numPriceLevels"
      | "onERC721Received"
      | "poolAddress"
      | "priceLevels"
      | "sell"
      | "state"
      | "swapRouter"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "HigherrrrrrMarketGraduated"
      | "HigherrrrrrTokenBuy"
      | "HigherrrrrrTokenFees"
      | "HigherrrrrrTokenSell"
      | "HigherrrrrrTokenTransfer"
      | "Initialized"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONVICTION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ORDER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convictionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBuyQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSellQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBuyQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSellQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      string,
      string,
      string,
      IHigherrrrrrr.PriceLevelStruct[],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPriceLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceLevels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONVICTION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ORDER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convictionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBuyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBuyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numPriceLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HigherrrrrrMarketGraduatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    poolAddress: AddressLike,
    totalEthLiquidity: BigNumberish,
    totalTokenLiquidity: BigNumberish,
    lpPositionId: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    poolAddress: string,
    totalEthLiquidity: bigint,
    totalTokenLiquidity: bigint,
    lpPositionId: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    poolAddress: string;
    totalEthLiquidity: bigint;
    totalTokenLiquidity: bigint;
    lpPositionId: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HigherrrrrrTokenBuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    recipient: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethSold: BigNumberish,
    tokensBought: BigNumberish,
    buyerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    recipient: string,
    totalEth: bigint,
    ethFee: bigint,
    ethSold: bigint,
    tokensBought: bigint,
    buyerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    buyer: string;
    recipient: string;
    totalEth: bigint;
    ethFee: bigint;
    ethSold: bigint;
    tokensBought: bigint;
    buyerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HigherrrrrrTokenFeesEvent {
  export type InputTuple = [feeRecipient: AddressLike, fee: BigNumberish];
  export type OutputTuple = [feeRecipient: string, fee: bigint];
  export interface OutputObject {
    feeRecipient: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HigherrrrrrTokenSellEvent {
  export type InputTuple = [
    seller: AddressLike,
    recipient: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethBought: BigNumberish,
    tokensSold: BigNumberish,
    sellerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    recipient: string,
    totalEth: bigint,
    ethFee: bigint,
    ethBought: bigint,
    tokensSold: bigint,
    sellerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    seller: string;
    recipient: string;
    totalEth: bigint;
    ethFee: bigint;
    ethBought: bigint;
    tokensSold: bigint;
    sellerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HigherrrrrrTokenTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    fromTokenBalance: BigNumberish,
    toTokenBalance: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    fromTokenBalance: bigint,
    toTokenBalance: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    fromTokenBalance: bigint;
    toTokenBalance: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Higherrrrrrr extends BaseContract {
  connect(runner?: ContractRunner | null): Higherrrrrrr;
  waitForDeployment(): Promise<this>;

  interface: HigherrrrrrrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONVICTION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MIN_ORDER_SIZE: TypedContractMethod<[], [bigint], "view">;

  TOTAL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bondingCurve: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<[tokensToBurn: BigNumberish], [void], "nonpayable">;

  buy: TypedContractMethod<
    [
      recipient: AddressLike,
      refundRecipient: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  convictionNFT: TypedContractMethod<[], [string], "view">;

  currentExchangeRate: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getEthBuyQuote: TypedContractMethod<
    [ethOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getEthSellQuote: TypedContractMethod<
    [ethOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getPriceLevels: TypedContractMethod<
    [],
    [IHigherrrrrrr.PriceLevelStructOutput[]],
    "view"
  >;

  getTokenBuyQuote: TypedContractMethod<
    [tokenOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenSellQuote: TypedContractMethod<
    [tokenOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string,
      _priceLevels: IHigherrrrrrr.PriceLevelStruct[],
      _convictionNFT: AddressLike
    ],
    [void],
    "payable"
  >;

  marketType: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  numPriceLevels: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  poolAddress: TypedContractMethod<[], [string], "view">;

  priceLevels: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { price: bigint; name: string }],
    "view"
  >;

  sell: TypedContractMethod<
    [
      tokensToSell: BigNumberish,
      recipient: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  state: TypedContractMethod<
    [],
    [IHigherrrrrrr.MarketStateStructOutput],
    "view"
  >;

  swapRouter: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONVICTION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ORDER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondingCurve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokensToBurn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      refundRecipient: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "convictionNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthBuyQuote"
  ): TypedContractMethod<[ethOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthSellQuote"
  ): TypedContractMethod<[ethOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceLevels"
  ): TypedContractMethod<[], [IHigherrrrrrr.PriceLevelStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokenBuyQuote"
  ): TypedContractMethod<[tokenOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenSellQuote"
  ): TypedContractMethod<[tokenOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string,
      _priceLevels: IHigherrrrrrr.PriceLevelStruct[],
      _convictionNFT: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "marketType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numPriceLevels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceLevels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { price: bigint; name: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [
      tokensToSell: BigNumberish,
      recipient: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [IHigherrrrrrr.MarketStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "HigherrrrrrMarketGraduated"
  ): TypedContractEvent<
    HigherrrrrrMarketGraduatedEvent.InputTuple,
    HigherrrrrrMarketGraduatedEvent.OutputTuple,
    HigherrrrrrMarketGraduatedEvent.OutputObject
  >;
  getEvent(
    key: "HigherrrrrrTokenBuy"
  ): TypedContractEvent<
    HigherrrrrrTokenBuyEvent.InputTuple,
    HigherrrrrrTokenBuyEvent.OutputTuple,
    HigherrrrrrTokenBuyEvent.OutputObject
  >;
  getEvent(
    key: "HigherrrrrrTokenFees"
  ): TypedContractEvent<
    HigherrrrrrTokenFeesEvent.InputTuple,
    HigherrrrrrTokenFeesEvent.OutputTuple,
    HigherrrrrrTokenFeesEvent.OutputObject
  >;
  getEvent(
    key: "HigherrrrrrTokenSell"
  ): TypedContractEvent<
    HigherrrrrrTokenSellEvent.InputTuple,
    HigherrrrrrTokenSellEvent.OutputTuple,
    HigherrrrrrTokenSellEvent.OutputObject
  >;
  getEvent(
    key: "HigherrrrrrTokenTransfer"
  ): TypedContractEvent<
    HigherrrrrrTokenTransferEvent.InputTuple,
    HigherrrrrrTokenTransferEvent.OutputTuple,
    HigherrrrrrTokenTransferEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "HigherrrrrrMarketGraduated(address,address,uint256,uint256,uint256,uint8)": TypedContractEvent<
      HigherrrrrrMarketGraduatedEvent.InputTuple,
      HigherrrrrrMarketGraduatedEvent.OutputTuple,
      HigherrrrrrMarketGraduatedEvent.OutputObject
    >;
    HigherrrrrrMarketGraduated: TypedContractEvent<
      HigherrrrrrMarketGraduatedEvent.InputTuple,
      HigherrrrrrMarketGraduatedEvent.OutputTuple,
      HigherrrrrrMarketGraduatedEvent.OutputObject
    >;

    "HigherrrrrrTokenBuy(address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      HigherrrrrrTokenBuyEvent.InputTuple,
      HigherrrrrrTokenBuyEvent.OutputTuple,
      HigherrrrrrTokenBuyEvent.OutputObject
    >;
    HigherrrrrrTokenBuy: TypedContractEvent<
      HigherrrrrrTokenBuyEvent.InputTuple,
      HigherrrrrrTokenBuyEvent.OutputTuple,
      HigherrrrrrTokenBuyEvent.OutputObject
    >;

    "HigherrrrrrTokenFees(address,uint256)": TypedContractEvent<
      HigherrrrrrTokenFeesEvent.InputTuple,
      HigherrrrrrTokenFeesEvent.OutputTuple,
      HigherrrrrrTokenFeesEvent.OutputObject
    >;
    HigherrrrrrTokenFees: TypedContractEvent<
      HigherrrrrrTokenFeesEvent.InputTuple,
      HigherrrrrrTokenFeesEvent.OutputTuple,
      HigherrrrrrTokenFeesEvent.OutputObject
    >;

    "HigherrrrrrTokenSell(address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      HigherrrrrrTokenSellEvent.InputTuple,
      HigherrrrrrTokenSellEvent.OutputTuple,
      HigherrrrrrTokenSellEvent.OutputObject
    >;
    HigherrrrrrTokenSell: TypedContractEvent<
      HigherrrrrrTokenSellEvent.InputTuple,
      HigherrrrrrTokenSellEvent.OutputTuple,
      HigherrrrrrTokenSellEvent.OutputObject
    >;

    "HigherrrrrrTokenTransfer(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      HigherrrrrrTokenTransferEvent.InputTuple,
      HigherrrrrrTokenTransferEvent.OutputTuple,
      HigherrrrrrTokenTransferEvent.OutputObject
    >;
    HigherrrrrrTokenTransfer: TypedContractEvent<
      HigherrrrrrTokenTransferEvent.InputTuple,
      HigherrrrrrTokenTransferEvent.OutputTuple,
      HigherrrrrrTokenTransferEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
