/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IHigherrrrrrr {
  export type PriceLevelStruct = { price: BigNumberish; name: string };

  export type PriceLevelStructOutput = [price: bigint, name: string] & {
    price: bigint;
    name: string;
  };
}

export interface HigherrrrrrrFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bondingCurve"
      | "convictionImplementation"
      | "createHigherrrrrrr"
      | "feeRecipient"
      | "nonfungiblePositionManager"
      | "swapRouter"
      | "weth"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewToken"): EventFragment;

  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convictionImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createHigherrrrrrr",
    values: [string, string, string, IHigherrrrrrr.PriceLevelStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convictionImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHigherrrrrrr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace NewTokenEvent {
  export type InputTuple = [token: AddressLike, conviction: AddressLike];
  export type OutputTuple = [token: string, conviction: string];
  export interface OutputObject {
    token: string;
    conviction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HigherrrrrrrFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HigherrrrrrrFactory;
  waitForDeployment(): Promise<this>;

  interface: HigherrrrrrrFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bondingCurve: TypedContractMethod<[], [string], "view">;

  convictionImplementation: TypedContractMethod<[], [string], "view">;

  createHigherrrrrrr: TypedContractMethod<
    [
      name: string,
      symbol: string,
      uri: string,
      levels: IHigherrrrrrr.PriceLevelStruct[]
    ],
    [[string, string] & { token: string; conviction: string }],
    "payable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bondingCurve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "convictionImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createHigherrrrrrr"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      uri: string,
      levels: IHigherrrrrrr.PriceLevelStruct[]
    ],
    [[string, string] & { token: string; conviction: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NewToken"
  ): TypedContractEvent<
    NewTokenEvent.InputTuple,
    NewTokenEvent.OutputTuple,
    NewTokenEvent.OutputObject
  >;

  filters: {
    "NewToken(address,address)": TypedContractEvent<
      NewTokenEvent.InputTuple,
      NewTokenEvent.OutputTuple,
      NewTokenEvent.OutputObject
    >;
    NewToken: TypedContractEvent<
      NewTokenEvent.InputTuple,
      NewTokenEvent.OutputTuple,
      NewTokenEvent.OutputObject
    >;
  };
}
