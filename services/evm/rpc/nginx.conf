load_module modules/ngx_http_headers_more_filter_module.so;

worker_processes auto;

events {
    worker_connections 2048;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Add error logging
    error_log /dev/stderr debug;
    access_log /dev/stdout;

    # Cache settings
    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=rpc_cache:10m max_size=10g inactive=60m use_temp_path=off;

    # Define allowed origins
    map $http_origin $is_allowed_origin {
        default 0;
        "http://localhost:3000" 1;
        "https://alpha.higherrrrrrr.fun" 1;
        "https://higherrrrrrr.fun" 1;
        "https://higherrrrrrr-alpha-588022212596.us-central1.run.app" 1;
    }

    # Define cache control based on request body
    map $request_body $cache_control {
        default                    "no-store";
        ~"eth_blockNumber"        "public, max-age=2";
        ~"eth_call"              "public, max-age=22";
    }

    server {
        listen 8080;

        location / {
            # Check if origin is allowed
            if ($is_allowed_origin = 0) {
                return 403;
            }

            # Remove CORS headers from upstream
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Max-Age';

            # Add our CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' '2592000' always;
            add_header 'X-Cache-Status' $upstream_cache_status always;

            # Handle preflight
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Proxy settings
            proxy_pass https://base-mainnet.g.alchemy.com/v2/jFjopZDrbRnD8hRKINkO7BOwW9YH9iLD;
            proxy_http_version 1.1;
            proxy_set_header Host base-mainnet.g.alchemy.com;
            proxy_set_header Content-Type 'application/json';
            proxy_set_header Origin '';
            proxy_set_header Referer '';
            proxy_set_header User-Agent '';
            
            # Clear existing cache headers
            more_clear_headers "Cache-Control";
            more_clear_headers "Expires";
            more_clear_headers "Pragma";
            more_clear_headers "Server";
            
            # Set cache control header based on request type
            add_header Cache-Control $cache_control always;
            
            # Cache settings
            proxy_cache rpc_cache;
            proxy_cache_methods POST;
            proxy_cache_key "$request_body";
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            
            proxy_cache_bypass $http_cache_bypass;
        }
    }
}